-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    io_cmd_V : IN STD_LOGIC_VECTOR (159 downto 0);
    io_cmd_V_ap_vld : IN STD_LOGIC;
    io_cmd_V_ap_ack : OUT STD_LOGIC;
    io_resp_V : OUT STD_LOGIC_VECTOR (73 downto 0);
    io_resp_V_ap_vld : OUT STD_LOGIC;
    io_resp_V_ap_ack : IN STD_LOGIC );
end;


architecture behav of mul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mul,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.820000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=25,HLS_SYN_LUT=19}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

    signal tmp_rd_V_reg_103 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_40 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_57 : BOOLEAN;
    signal ap_reg_ioackin_io_resp_V_ap_ack : STD_LOGIC := '0';
    signal ap_sig_ioackin_io_resp_V_ap_ack : STD_LOGIC;
    signal grp_fu_87_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_87_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_87_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_87_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component mul_mul_64s_64s_64_19 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_mul_64s_64s_64_19_U1 : component mul_mul_64s_64s_64_19
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_87_p0,
        din1 => grp_fu_87_p1,
        ce => grp_fu_87_ce,
        dout => grp_fu_87_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_io_resp_V_ap_ack assign process. --
    ap_reg_ioackin_io_resp_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_io_resp_V_ap_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_io_resp_V_ap_ack))) then 
                        ap_reg_ioackin_io_resp_V_ap_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = io_resp_V_ap_ack)) then 
                        ap_reg_ioackin_io_resp_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((io_cmd_V_ap_vld = ap_const_logic_0)))) then
                tmp_rd_V_reg_103 <= io_cmd_V(24 downto 20);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (io_cmd_V_ap_vld, ap_CS_fsm, ap_sig_ioackin_io_resp_V_ap_ack)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((io_cmd_V_ap_vld = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_io_resp_V_ap_ack))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_sig_bdd_40 assign process. --
    ap_sig_bdd_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_40 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_57 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_57)
    begin
        if (ap_sig_bdd_57) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_40)
    begin
        if (ap_sig_bdd_40) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_io_resp_V_ap_ack assign process. --
    ap_sig_ioackin_io_resp_V_ap_ack_assign_proc : process(io_resp_V_ap_ack, ap_reg_ioackin_io_resp_V_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_io_resp_V_ap_ack)) then 
            ap_sig_ioackin_io_resp_V_ap_ack <= io_resp_V_ap_ack;
        else 
            ap_sig_ioackin_io_resp_V_ap_ack <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fu_87_ce assign process. --
    grp_fu_87_ce_assign_proc : process(io_cmd_V_ap_vld, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st19_fsm_18, ap_sig_ioackin_io_resp_V_ap_ack)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (io_cmd_V_ap_vld = ap_const_logic_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_logic_0 = ap_sig_ioackin_io_resp_V_ap_ack)))) then 
            grp_fu_87_ce <= ap_const_logic_0;
        else 
            grp_fu_87_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_87_p0 <= io_cmd_V(159 downto 96);
    grp_fu_87_p1 <= io_cmd_V(95 downto 32);

    -- io_cmd_V_ap_ack assign process. --
    io_cmd_V_ap_ack_assign_proc : process(io_cmd_V_ap_vld, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((io_cmd_V_ap_vld = ap_const_logic_0)))) then 
            io_cmd_V_ap_ack <= ap_const_logic_1;
        else 
            io_cmd_V_ap_ack <= ap_const_logic_0;
        end if; 
    end process;

    io_resp_V <= ((grp_fu_87_p2 & tmp_rd_V_reg_103) & ap_const_lv5_0);

    -- io_resp_V_ap_vld assign process. --
    io_resp_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18, ap_reg_ioackin_io_resp_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_logic_0 = ap_reg_ioackin_io_resp_V_ap_ack))) then 
            io_resp_V_ap_vld <= ap_const_logic_1;
        else 
            io_resp_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
