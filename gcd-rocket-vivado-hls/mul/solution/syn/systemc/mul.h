// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _mul_HH_
#define _mul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mul_mul_64s_64s_64_19.h"

namespace ap_rtl {

struct mul : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<160> > io_cmd_V;
    sc_in< sc_logic > io_cmd_V_ap_vld;
    sc_out< sc_logic > io_cmd_V_ap_ack;
    sc_out< sc_lv<74> > io_resp_V;
    sc_out< sc_logic > io_resp_V_ap_vld;
    sc_in< sc_logic > io_resp_V_ap_ack;


    // Module declarations
    mul(sc_module_name name);
    SC_HAS_PROCESS(mul);

    ~mul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mul_mul_64s_64s_64_19<1,19,64,64,64>* mul_mul_64s_64s_64_19_U1;
    sc_signal< sc_lv<5> > tmp_rd_V_reg_103;
    sc_signal< sc_lv<19> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_40;
    sc_signal< sc_logic > ap_sig_cseq_ST_st19_fsm_18;
    sc_signal< bool > ap_sig_bdd_57;
    sc_signal< sc_logic > ap_reg_ioackin_io_resp_V_ap_ack;
    sc_signal< sc_logic > ap_sig_ioackin_io_resp_V_ap_ack;
    sc_signal< sc_lv<64> > grp_fu_87_p0;
    sc_signal< sc_lv<64> > grp_fu_87_p1;
    sc_signal< sc_lv<64> > grp_fu_87_p2;
    sc_signal< sc_logic > grp_fu_87_ce;
    sc_signal< sc_lv<19> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<19> ap_ST_st1_fsm_0;
    static const sc_lv<19> ap_ST_st2_fsm_1;
    static const sc_lv<19> ap_ST_st3_fsm_2;
    static const sc_lv<19> ap_ST_st4_fsm_3;
    static const sc_lv<19> ap_ST_st5_fsm_4;
    static const sc_lv<19> ap_ST_st6_fsm_5;
    static const sc_lv<19> ap_ST_st7_fsm_6;
    static const sc_lv<19> ap_ST_st8_fsm_7;
    static const sc_lv<19> ap_ST_st9_fsm_8;
    static const sc_lv<19> ap_ST_st10_fsm_9;
    static const sc_lv<19> ap_ST_st11_fsm_10;
    static const sc_lv<19> ap_ST_st12_fsm_11;
    static const sc_lv<19> ap_ST_st13_fsm_12;
    static const sc_lv<19> ap_ST_st14_fsm_13;
    static const sc_lv<19> ap_ST_st15_fsm_14;
    static const sc_lv<19> ap_ST_st16_fsm_15;
    static const sc_lv<19> ap_ST_st17_fsm_16;
    static const sc_lv<19> ap_ST_st18_fsm_17;
    static const sc_lv<19> ap_ST_st19_fsm_18;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_5F;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_9F;
    static const sc_lv<5> ap_const_lv5_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_sig_bdd_40();
    void thread_ap_sig_bdd_57();
    void thread_ap_sig_cseq_ST_st19_fsm_18();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_ioackin_io_resp_V_ap_ack();
    void thread_grp_fu_87_ce();
    void thread_grp_fu_87_p0();
    void thread_grp_fu_87_p1();
    void thread_io_cmd_V_ap_ack();
    void thread_io_resp_V();
    void thread_io_resp_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
