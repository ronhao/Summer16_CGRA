// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "mul.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mul::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mul::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> mul::ap_ST_st1_fsm_0 = "1";
const sc_lv<19> mul::ap_ST_st2_fsm_1 = "10";
const sc_lv<19> mul::ap_ST_st3_fsm_2 = "100";
const sc_lv<19> mul::ap_ST_st4_fsm_3 = "1000";
const sc_lv<19> mul::ap_ST_st5_fsm_4 = "10000";
const sc_lv<19> mul::ap_ST_st6_fsm_5 = "100000";
const sc_lv<19> mul::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<19> mul::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<19> mul::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<19> mul::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<19> mul::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<19> mul::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<19> mul::ap_ST_st13_fsm_12 = "1000000000000";
const sc_lv<19> mul::ap_ST_st14_fsm_13 = "10000000000000";
const sc_lv<19> mul::ap_ST_st15_fsm_14 = "100000000000000";
const sc_lv<19> mul::ap_ST_st16_fsm_15 = "1000000000000000";
const sc_lv<19> mul::ap_ST_st17_fsm_16 = "10000000000000000";
const sc_lv<19> mul::ap_ST_st18_fsm_17 = "100000000000000000";
const sc_lv<19> mul::ap_ST_st19_fsm_18 = "1000000000000000000";
const sc_lv<32> mul::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> mul::ap_const_lv1_1 = "1";
const sc_lv<32> mul::ap_const_lv32_12 = "10010";
const sc_lv<32> mul::ap_const_lv32_14 = "10100";
const sc_lv<32> mul::ap_const_lv32_18 = "11000";
const sc_lv<32> mul::ap_const_lv32_20 = "100000";
const sc_lv<32> mul::ap_const_lv32_5F = "1011111";
const sc_lv<32> mul::ap_const_lv32_60 = "1100000";
const sc_lv<32> mul::ap_const_lv32_9F = "10011111";
const sc_lv<5> mul::ap_const_lv5_0 = "00000";

mul::mul(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mul_mul_64s_64s_64_19_U1 = new mul_mul_64s_64s_64_19<1,19,64,64,64>("mul_mul_64s_64s_64_19_U1");
    mul_mul_64s_64s_64_19_U1->clk(ap_clk);
    mul_mul_64s_64s_64_19_U1->reset(ap_rst);
    mul_mul_64s_64s_64_19_U1->din0(grp_fu_87_p0);
    mul_mul_64s_64s_64_19_U1->din1(grp_fu_87_p1);
    mul_mul_64s_64s_64_19_U1->ce(grp_fu_87_ce);
    mul_mul_64s_64s_64_19_U1->dout(grp_fu_87_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_sig_bdd_40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st19_fsm_18);
    sensitive << ( ap_sig_bdd_57 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_40 );

    SC_METHOD(thread_ap_sig_ioackin_io_resp_V_ap_ack);
    sensitive << ( io_resp_V_ap_ack );
    sensitive << ( ap_reg_ioackin_io_resp_V_ap_ack );

    SC_METHOD(thread_grp_fu_87_ce);
    sensitive << ( io_cmd_V_ap_vld );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st19_fsm_18 );
    sensitive << ( ap_sig_ioackin_io_resp_V_ap_ack );

    SC_METHOD(thread_grp_fu_87_p0);
    sensitive << ( io_cmd_V );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_grp_fu_87_p1);
    sensitive << ( io_cmd_V );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_io_cmd_V_ap_ack);
    sensitive << ( io_cmd_V_ap_vld );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_io_resp_V);
    sensitive << ( tmp_rd_V_reg_103 );
    sensitive << ( ap_sig_cseq_ST_st19_fsm_18 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_io_resp_V_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st19_fsm_18 );
    sensitive << ( ap_reg_ioackin_io_resp_V_ap_ack );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( io_cmd_V_ap_vld );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_ioackin_io_resp_V_ap_ack );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000000000001";
    ap_reg_ioackin_io_resp_V_ap_ack = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mul_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, io_cmd_V, "(port)io_cmd_V");
    sc_trace(mVcdFile, io_cmd_V_ap_vld, "(port)io_cmd_V_ap_vld");
    sc_trace(mVcdFile, io_cmd_V_ap_ack, "(port)io_cmd_V_ap_ack");
    sc_trace(mVcdFile, io_resp_V, "(port)io_resp_V");
    sc_trace(mVcdFile, io_resp_V_ap_vld, "(port)io_resp_V_ap_vld");
    sc_trace(mVcdFile, io_resp_V_ap_ack, "(port)io_resp_V_ap_ack");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_rd_V_reg_103, "tmp_rd_V_reg_103");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_40, "ap_sig_bdd_40");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st19_fsm_18, "ap_sig_cseq_ST_st19_fsm_18");
    sc_trace(mVcdFile, ap_sig_bdd_57, "ap_sig_bdd_57");
    sc_trace(mVcdFile, ap_reg_ioackin_io_resp_V_ap_ack, "ap_reg_ioackin_io_resp_V_ap_ack");
    sc_trace(mVcdFile, ap_sig_ioackin_io_resp_V_ap_ack, "ap_sig_ioackin_io_resp_V_ap_ack");
    sc_trace(mVcdFile, grp_fu_87_p0, "grp_fu_87_p0");
    sc_trace(mVcdFile, grp_fu_87_p1, "grp_fu_87_p1");
    sc_trace(mVcdFile, grp_fu_87_p2, "grp_fu_87_p2");
    sc_trace(mVcdFile, grp_fu_87_ce, "grp_fu_87_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mul.hdltvin.dat");
    mHdltvoutHandle.open("mul.hdltvout.dat");
}

mul::~mul() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mul_mul_64s_64s_64_19_U1;
}

void mul::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_io_resp_V_ap_ack = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st19_fsm_18.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_io_resp_V_ap_ack.read())) {
                ap_reg_ioackin_io_resp_V_ap_ack = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, io_resp_V_ap_ack.read())) {
                ap_reg_ioackin_io_resp_V_ap_ack = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(io_cmd_V_ap_vld.read(), ap_const_logic_0))) {
        tmp_rd_V_reg_103 = io_cmd_V.read().range(24, 20);
    }
}

void mul::thread_ap_sig_bdd_40() {
    ap_sig_bdd_40 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void mul::thread_ap_sig_bdd_57() {
    ap_sig_bdd_57 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(18, 18));
}

void mul::thread_ap_sig_cseq_ST_st19_fsm_18() {
    if (ap_sig_bdd_57.read()) {
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    }
}

void mul::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_40.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void mul::thread_ap_sig_ioackin_io_resp_V_ap_ack() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_io_resp_V_ap_ack.read())) {
        ap_sig_ioackin_io_resp_V_ap_ack = io_resp_V_ap_ack.read();
    } else {
        ap_sig_ioackin_io_resp_V_ap_ack = ap_const_logic_1;
    }
}

void mul::thread_grp_fu_87_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          esl_seteq<1,1,1>(io_cmd_V_ap_vld.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st19_fsm_18.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_io_resp_V_ap_ack.read())))) {
        grp_fu_87_ce = ap_const_logic_0;
    } else {
        grp_fu_87_ce = ap_const_logic_1;
    }
}

void mul::thread_grp_fu_87_p0() {
    grp_fu_87_p0 = io_cmd_V.read().range(159, 96);
}

void mul::thread_grp_fu_87_p1() {
    grp_fu_87_p1 = io_cmd_V.read().range(95, 32);
}

void mul::thread_io_cmd_V_ap_ack() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(io_cmd_V_ap_vld.read(), ap_const_logic_0))) {
        io_cmd_V_ap_ack = ap_const_logic_1;
    } else {
        io_cmd_V_ap_ack = ap_const_logic_0;
    }
}

void mul::thread_io_resp_V() {
    io_resp_V = esl_concat<69,5>(esl_concat<64,5>(grp_fu_87_p2.read(), tmp_rd_V_reg_103.read()), ap_const_lv5_0);
}

void mul::thread_io_resp_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st19_fsm_18.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_io_resp_V_ap_ack.read()))) {
        io_resp_V_ap_vld = ap_const_logic_1;
    } else {
        io_resp_V_ap_vld = ap_const_logic_0;
    }
}

void mul::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(io_cmd_V_ap_vld.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 262144 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_io_resp_V_ap_ack.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st19_fsm_18;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXX";
            break;
    }
}

void mul::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"io_cmd_V\" :  \"" << io_cmd_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"io_cmd_V_ap_vld\" :  \"" << io_cmd_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"io_cmd_V_ap_ack\" :  \"" << io_cmd_V_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"io_resp_V\" :  \"" << io_resp_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"io_resp_V_ap_vld\" :  \"" << io_resp_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"io_resp_V_ap_ack\" :  \"" << io_resp_V_ap_ack.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

