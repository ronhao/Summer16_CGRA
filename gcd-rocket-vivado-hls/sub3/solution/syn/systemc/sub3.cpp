// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "sub3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sub3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sub3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> sub3::ap_ST_st1_fsm_0 = "1";
const sc_lv<32> sub3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sub3::ap_const_lv1_1 = "1";
const sc_lv<32> sub3::ap_const_lv32_14 = "10100";
const sc_lv<32> sub3::ap_const_lv32_18 = "11000";
const sc_lv<32> sub3::ap_const_lv32_20 = "100000";
const sc_lv<32> sub3::ap_const_lv32_5F = "1011111";
const sc_lv<32> sub3::ap_const_lv32_60 = "1100000";
const sc_lv<32> sub3::ap_const_lv32_9E = "10011110";
const sc_lv<1> sub3::ap_const_lv1_0 = "0";
const sc_lv<5> sub3::ap_const_lv5_0 = "00000";

sub3::sub3(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_V_2_fu_101_p2);
    sensitive << ( tmp_fu_93_p3 );
    sensitive << ( a_V_fu_73_p4 );

    SC_METHOD(thread_a_V_fu_73_p4);
    sensitive << ( io_cmd_V );

    SC_METHOD(thread_ap_sig_bdd_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_82);
    sensitive << ( io_cmd_V_ap_vld );
    sensitive << ( io_resp_V_ap_ack );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_21 );

    SC_METHOD(thread_ap_sig_ioackin_io_resp_V_ap_ack);
    sensitive << ( io_resp_V_ap_ack );
    sensitive << ( ap_reg_ioackin_io_resp_V_ap_ack );

    SC_METHOD(thread_io_cmd_V_ap_ack);
    sensitive << ( io_cmd_V_ap_vld );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_ioackin_io_resp_V_ap_ack );

    SC_METHOD(thread_io_resp_V);
    sensitive << ( io_cmd_V_ap_vld );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( a_V_2_fu_101_p2 );
    sensitive << ( tmp_rd_V_fu_63_p4 );

    SC_METHOD(thread_io_resp_V_ap_vld);
    sensitive << ( io_cmd_V_ap_vld );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_reg_ioackin_io_resp_V_ap_ack );

    SC_METHOD(thread_tmp_2_fu_83_p4);
    sensitive << ( io_cmd_V );

    SC_METHOD(thread_tmp_fu_93_p3);
    sensitive << ( tmp_2_fu_83_p4 );

    SC_METHOD(thread_tmp_rd_V_fu_63_p4);
    sensitive << ( io_cmd_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( io_cmd_V_ap_vld );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_ioackin_io_resp_V_ap_ack );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_reg_ioackin_io_resp_V_ap_ack = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sub3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, io_cmd_V, "(port)io_cmd_V");
    sc_trace(mVcdFile, io_cmd_V_ap_vld, "(port)io_cmd_V_ap_vld");
    sc_trace(mVcdFile, io_cmd_V_ap_ack, "(port)io_cmd_V_ap_ack");
    sc_trace(mVcdFile, io_resp_V, "(port)io_resp_V");
    sc_trace(mVcdFile, io_resp_V_ap_vld, "(port)io_resp_V_ap_vld");
    sc_trace(mVcdFile, io_resp_V_ap_ack, "(port)io_resp_V_ap_ack");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_21, "ap_sig_bdd_21");
    sc_trace(mVcdFile, ap_sig_ioackin_io_resp_V_ap_ack, "ap_sig_ioackin_io_resp_V_ap_ack");
    sc_trace(mVcdFile, ap_reg_ioackin_io_resp_V_ap_ack, "ap_reg_ioackin_io_resp_V_ap_ack");
    sc_trace(mVcdFile, tmp_2_fu_83_p4, "tmp_2_fu_83_p4");
    sc_trace(mVcdFile, tmp_fu_93_p3, "tmp_fu_93_p3");
    sc_trace(mVcdFile, a_V_fu_73_p4, "a_V_fu_73_p4");
    sc_trace(mVcdFile, a_V_2_fu_101_p2, "a_V_2_fu_101_p2");
    sc_trace(mVcdFile, tmp_rd_V_fu_63_p4, "tmp_rd_V_fu_63_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_82, "ap_sig_bdd_82");
#endif

    }
    mHdltvinHandle.open("sub3.hdltvin.dat");
    mHdltvoutHandle.open("sub3.hdltvout.dat");
}

sub3::~sub3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void sub3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_io_resp_V_ap_ack = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
            if (!(esl_seteq<1,1,1>(io_cmd_V_ap_vld.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_io_resp_V_ap_ack.read()))) {
                ap_reg_ioackin_io_resp_V_ap_ack = ap_const_logic_0;
            } else if (ap_sig_bdd_82.read()) {
                ap_reg_ioackin_io_resp_V_ap_ack = ap_const_logic_1;
            }
        }
    }
}

void sub3::thread_a_V_2_fu_101_p2() {
    a_V_2_fu_101_p2 = (!tmp_fu_93_p3.read().is_01() || !a_V_fu_73_p4.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_fu_93_p3.read()) + sc_biguint<64>(a_V_fu_73_p4.read()));
}

void sub3::thread_a_V_fu_73_p4() {
    a_V_fu_73_p4 = io_cmd_V.read().range(95, 32);
}

void sub3::thread_ap_sig_bdd_21() {
    ap_sig_bdd_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void sub3::thread_ap_sig_bdd_82() {
    ap_sig_bdd_82 = (!esl_seteq<1,1,1>(io_cmd_V_ap_vld.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_logic_1, io_resp_V_ap_ack.read()));
}

void sub3::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void sub3::thread_ap_sig_ioackin_io_resp_V_ap_ack() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_io_resp_V_ap_ack.read())) {
        ap_sig_ioackin_io_resp_V_ap_ack = io_resp_V_ap_ack.read();
    } else {
        ap_sig_ioackin_io_resp_V_ap_ack = ap_const_logic_1;
    }
}

void sub3::thread_io_cmd_V_ap_ack() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !(esl_seteq<1,1,1>(io_cmd_V_ap_vld.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_io_resp_V_ap_ack.read())))) {
        io_cmd_V_ap_ack = ap_const_logic_1;
    } else {
        io_cmd_V_ap_ack = ap_const_logic_0;
    }
}

void sub3::thread_io_resp_V() {
    io_resp_V = esl_concat<69,5>(esl_concat<64,5>(a_V_2_fu_101_p2.read(), tmp_rd_V_fu_63_p4.read()), ap_const_lv5_0);
}

void sub3::thread_io_resp_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(io_cmd_V_ap_vld.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_io_resp_V_ap_ack.read()))) {
        io_resp_V_ap_vld = ap_const_logic_1;
    } else {
        io_resp_V_ap_vld = ap_const_logic_0;
    }
}

void sub3::thread_tmp_2_fu_83_p4() {
    tmp_2_fu_83_p4 = io_cmd_V.read().range(158, 96);
}

void sub3::thread_tmp_fu_93_p3() {
    tmp_fu_93_p3 = esl_concat<63,1>(tmp_2_fu_83_p4.read(), ap_const_lv1_0);
}

void sub3::thread_tmp_rd_V_fu_63_p4() {
    tmp_rd_V_fu_63_p4 = io_cmd_V.read().range(24, 20);
}

void sub3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void sub3::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"io_cmd_V\" :  \"" << io_cmd_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"io_cmd_V_ap_vld\" :  \"" << io_cmd_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"io_cmd_V_ap_ack\" :  \"" << io_cmd_V_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"io_resp_V\" :  \"" << io_resp_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"io_resp_V_ap_vld\" :  \"" << io_resp_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"io_resp_V_ap_ack\" :  \"" << io_resp_V_ap_ack.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

